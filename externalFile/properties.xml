<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<properties>

    <uuid>File</uuid>
    <provider>javaExternal</provider>
    <author>Nikolay V. Ulyanov</author>
    <contacts>ulianownv@mail.ru</contacts>
    <homePage>http://www.smcsystem.ru</homePage>
    <className>ru.smcsystem.smcmodules.module.File</className>
    <ver>1.4.1</ver>
    <apiVer>1.0.0</apiVer>
    <date>31-12-2020</date>
    <categories>Java, File</categories>
    <copyrightAndLicense>
        <entry>
            <key>en</key>
            <value>The author and copyright holder is Nikolay V. Ulyanov.
The program is free for use.
Forbidden: changing the program code, its sale / resale, as well as other actions and rights not explicitly permitted.
The program is supplied as is. For problems arising during the operation or installation of the program, the author, developer and distributor are not responsible.
            </value>
        </entry>
        <entry>
            <key>ru</key>
            <value>Автором и правообладателем является Ульянов Николай Владимирович.
Программа бесплатна для использования.
Запрещено: изменение кода программы, её продажа/перепродажа а так же иные не разрешенные явно действия и права.
Программа поставляется как есть. За проблемы, возникающие в процессе эксплуатации или установки программы, автор, разработчик и распространитель ответственности не несут.
            </value>
        </entry>
    </copyrightAndLicense>

    <defaultSettings>
        <value>
            <name>rootFolder</name>
            <type>STRING</type>
            <value></value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Рабочая папка. Если пусто, используется рабочая папка конфигурации. может быть файлом.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Work folder. If empty, the configuration working folder is used. May be a file.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>type</name>
            <type>STRING</type>
            <value>dir</value>
            <validValues>
                <value>info</value>
                <value>fullInfo</value>
                <value>treeInfo</value>
                <value>treeFullInfo</value>
                <value>copy</value>
                <value>read</value>
                <value>readText</value>
                <value>tmpFolder</value>
                <value>remove</value>
                <value>dir</value>
                <value>create</value>
                <value>writePart</value>
                <value>write</value>
                <value>changeLastModified</value>
                <value>mkdir</value>
                <value>move</value>
                <value>useArgument</value>
                <value>readPart</value>
                <value>readTextPart</value>
                <value>pwd</value>
                <value>dirNames</value>
                <value>parent</value>
                <value>rename</value>
                <value>readTextNew</value>
                <value>readNew</value>
                <value>readTextLastNLines</value>
                <value>waitFile</value>
                <value>copyForce</value>
                <value>writeText</value>
                <value>writeTextBOM</value>
                <value>dirSortDate</value>
                <value>dirNamesSortDate</value>
                <value>removeOrWait</value>
                <value>readOrWait</value>
                <value>writeOrWait</value>
            </validValues>
            <description>
                <entry>
                    <key>en</key>
                    <value>Type of transaction:
info - gives information about the file (or all files in the specified directory): path, size, date of the last change, access level (2-write, 1-read, 0-no access), type (1- file, 0-directory),
fullInfo - the same as the previous + produces a hash,
treeInfo - same as info, but only for folders. displays information recursively,
treeFullInfo - same as fullInfo, but only for folders. displays information recursively,
copy - copies the file or folder to the path specified by the second data element. returns information about the file. does not overwrite files. requires 2 parameters: source path and destination path. also, if there are more string messages, then they are considered as patterns (regexp) for exclusion (excludes paths from copying).
read - reads a file and returns it as an array of bytes. requires 1 parameter - the path to the file.
readText - Reads a file and returns it as a string. requires 1 parameter - the path to the file.
tmpFolder - creates a temporary folder with the prefix Folder. returns the path
remove - removes the file (directory). returns the path
dir - displays file paths in a directory,
create - creates an empty file if it doesn’t exist,
writePart Writes replacement data (second data element) to the file starting at the specified position (third data element). returns the amount of data written. requires 2 parameters - the path to the file and the data.
write - Writes data (the second data element) to a file with replacement. old data is deleted. returns the amount of data written. requires 2 parameters - the path to the file and the data.
changeLastModified - changes the date of the last change, returns the previous value,
mkdir - creates a folder. returns the path
move - moves. takes 2 source and destination path parameters. returns the path
useArgument - will determine for each action of the source based on its first parameter (number, determines the position in the list of types),
readPart - Reads part of a file and returns it as an array of bytes. the second argument is the offset in bytes, if negative, it starts from the end of the file. the third argument is the size of the response byte array (0 if read to the end of the file). the first argument is the path to the file.
readTextPart - reads part of a file and returns it as a string. the second argument is the offset in bytes, if negative, it starts from the end of the file. the third argument is the size of the response byte array (0 if read to the end of the file). the first argument is the path to the file.
pwd - displays the path to the home directory.
dirNames - displays file names in a directory.
parent - displays the full path to the parent directory if it exists.
rename - renames a file or folder. requires a second argument - a new name.
readTextNew - Reads only new text. on each call, it remembers the file size and reads only the added part. if the new file size is less than or equal to the memorized one or the path to the file is not equal to the previous one, it returns nothing, only remembers. returns nothing on first run. returns a string only if there is an append.
readNew - Similar to readTextNew, but works with binaries. returns an array of bytes.
readTextLastNLines - reads the last N lines. takes 2 parameters: path to file and number - number of lines.
waitFile - waits until the file appears or the timeout is exceeded. checks every second. 1 parameter is required: maximum timeout in milliseconds.
copyForce - Similar to copy, but always overwrites destination files.
writeText - similar to write, but for text. takes 3 parameters, 2 as write, the last encoding name, optional.
writeTextBOM - Similar to writeText but uses the BOM format.
dirSortDate - Similar to dir, but outputs a list sorted by time.
dirNamesSortDate - Similar to dirNames, but outputs a list sorted by time.
removeOrWait - similar to remove, but if it fails, it tries again at the specified interval. in the arguments setting, 2 values are specified separated by commas: the maximum timeout in milliseconds, the interval between attempts in milliseconds. if it's empty, it doesn't wait.
readOrWait - similar to read, but if it fails, it tries again at the specified interval. in the arguments setting, 2 values are specified separated by commas: the maximum timeout in milliseconds, the interval between attempts in milliseconds. if it's empty, it doesn't wait.
writeOrWait - similar to write, but if it fails, it tries again at the specified interval. in the arguments setting, 2 values are specified separated by commas: the maximum timeout in milliseconds, the interval between attempts in milliseconds. if it's empty, it doesn't wait.
                    </value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Тип операции:
info - выдает информацию о файле (или всех файлах в указанной директории): путь, размер, дата последнего изменения, уровень доступа (2-на запись,1-на чтение,0-нет доступа), тип (1- файл, 0-директория),
fullInfo - тоже самое что и предыдуще + выдает хеш.
treeInfo - аналогично info, но только для папок. выводит информацию рекурсивно.
treeFullInfo - аналогично fullInfo, но только для папок. выводит информацию рекурсивно.
copy - копирует файл или папку в путь указанный вторым элементом данных. возвращает информацию о файле. не перезаписывает файлы. требует 2 параметра: путь к источнику и путь назначения. так же, если есть еще строковые сообщения - то их рассматривает как паттерны (регулярные выражения) для исключения (исключает пути из копирования).
read - читает файл и возвращает в виде массива байт. требует 1 параметр - путь до файла.
readText - читает файл и возвращает в виде строки. требует 1 параметр - путь до файла.
tmpFolder - создает временную папку с префиксом Folder. возвращает путь.
remove - удаляет файл (директорию). возвращает путь.
dir - выводит полные имена файлов в директории.
create - создает пустой файл, если не существует. возвращает путь.
writePart - записывает с заменой данные (второй элементы данных) в файл начиная с указанной позиции (третий элемент данных). возвращает колиество записаных данных. требует 2 параметра - путь до файла и данные.
write - записывает с заменой данные (второй элементы данных) в файл. старые данные стираются. возвращает колиество записаных данных. требует 2 параметра - путь до файла и данные.
changeLastModified - изменяет дату последнего изменения, возвращает предыдущее значение.
mkdir - создает папку. возвращает путь.
move - перемещает. принимает 2 параметра пути источника и назначения. возвращает путь.
useArgument - определет для каждого действия источника на основании его первого параметра (число, определяет позицию в списке типов).
readPart - читает часть файла и возвращает в виде массива байт. второй аргумент - смещение в байтах, если отрицательное, то начинается с конца файла. третий аргумент - размер байтового массива ответа (0 если читать до конца файла). первый аргумент - путь до файла.
readTextPart - читает часть файла и возвращает в виде строки. второй аргумент - смещение в байтах, если отрицательное, то начинается с конца файла. третий аргумент - размер байтового массива ответа (0 если читать до конца файла). первый аргумент - путь до файла.
pwd - выводит путь до домашней директории.
dirNames - выводит имена файлов в директории.
parent - выводит полный путь до родительской директории если она существует.
rename - переименовывает файл или папку. требует второй аргумент - новое имя.
readTextNew - читает только новый текст. при каждом обращении запоминает размер файла и читает только добавленную часть. если новый размер файла меньше или равен запомненому или путь до файла не равен предыдущему, ничего не возвращает, только запоминает. при первом запуске ничего не возвращает. возвращает строку только если есть добавление.
readNew - аналогичен readTextNew, но работает с бинарными файлами. возвращает массив байт.
readTextLastNLines - читает последние N строк. принимает 2 параметра: путь до файла и число - количество строк.
waitFile - ждет пока не появится файл или не будет превышено время ожидания. проверяет каждую секунду. требуется 1 параметр: максимальное время ожидания в миллисекундах.
copyForce - аналогичен copy, но всегда перезаписывает файлы назначения.
writeText - аналогичен write, но для текста. принимает 3 параметра, 2 как write, последний имя кодировки, опционально.
writeTextBOM - аналогичен writeText, но использует формат BOM.
dirSortDate - аналогичен dir, но выводит сортированый по времени список.
dirNamesSortDate - аналогичен dirNames, но выводит сортированый по времени список.
removeOrWait - аналогичен remove, но если не получается выполнить, то пытается снова с указанным интервалом. в настройке arguments указаны 2 значения через запятую: максимальное время ожидания в милисекундах, интервал между попытками в милисекундах. если пусто то не ждет.
readOrWait - аналогичен read, но если не получается выполнить, то пытается снова с указанным интервалом. в настройке arguments указаны 2 значения через запятую: максимальное время ожидания в милисекундах, интервал между попытками в милисекундах. если пусто то не ждет.
writeOrWait - аналогичен write, но если не получается выполнить, то пытается снова с указанным интервалом. в настройке arguments указаны 2 значения через запятую: максимальное время ожидания в милисекундах, интервал между попытками в милисекундах. если пусто то не ждет.
                    </value>
                </entry>
            </description>
        </value>
        <value>
            <name>hashAlgType</name>
            <type>STRING</type>
            <value>SHA256</value>
            <validValues>
                <value>MD5</value>
                <value>SHA1</value>
                <value>SHA256</value>
            </validValues>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Алгоритм хеширования.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Hash algorithm.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>arguments</name>
            <type>STRING</type>
            <value></value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>аргументы, определяется типом.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>arguments, defined by type.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>printAbsolutePath</name>
            <type>STRING</type>
            <value>false</value>
            <validValues>
                <value>true</value>
                <value>false</value>
            </validValues>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Если возвращается путь к файлу/каталогу, нужно ли выводить его полностью или относительно рабочей папки (если работа происходит в ней).</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>If the path to the file / directory is returned, whether it should be displayed completely or relative to the working folder (if the work happens in it).</value>
                </entry>
            </description>
        </value>
        <value>
            <name>useOnlyWorkDirectory</name>
            <type>STRING</type>
            <value>false</value>
            <validValues>
                <value>true</value>
                <value>false</value>
            </validValues>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Если установлен, запрещает обращаться к файлам за пределами рабочей папки.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>If set, prevents access to files outside the working folder.</value>
                </entry>
            </description>
        </value>
    </defaultSettings>

    <minCountSources>0</minCountSources>
    <maxCountSources>-1</maxCountSources>

    <minManagedExecutionContexts>0</minManagedExecutionContexts>
    <maxManagedExecutionContexts>0</maxManagedExecutionContexts>

    <minManagedConfigurations>0</minManagedConfigurations>
    <maxManagedConfigurations>0</maxManagedConfigurations>

    <typeSource>
        <ValueType>BYTE</ValueType>
        <ValueType>SHORT</ValueType>
        <ValueType>INTEGER</ValueType>
        <ValueType>LONG</ValueType>
        <ValueType>BIG_INTEGER</ValueType>
        <ValueType>FLOAT</ValueType>
        <ValueType>DOUBLE</ValueType>
        <ValueType>BIG_DECIMAL</ValueType>
        <ValueType>STRING</ValueType>
        <ValueType>BYTES</ValueType>
    </typeSource>

    <typeResult>
        <ValueType>STRING</ValueType>
        <ValueType>LONG</ValueType>
        <ValueType>BYTES</ValueType>
    </typeResult>

    <useStorage>true</useStorage>

    <threadSafe>true</threadSafe>

    <description>
        <entry>
            <key>en</key>
            <value>The module for working with files.</value>
        </entry>
        <entry>
            <key>ru</key>
            <value>Модуль работы с файлами.</value>
        </entry>
    </description>

    <help>
        <entry>
            <key>en</key>
            <value>The module for working with files.
works in two modes:
    dynamic:
        type required - useArgument and at least one source
        processes commands from sources.
        format:
            only if set useArgument - digit - type of operation,
            if rootFolder is a folder, then 2 arguments - a line - the relative path to the file (directory). if rootFolder is the name of the file, then it is used.
            other arguments depend on the type of action.
    static:
        type and all arguments are set in the configuration. Zapuk occurs without sources.
if rootFolder is set, this path will be used as the parent directory (if the path is relative, for example 1.txt, then the full path will be relative to the working directory).
otherwise the working configuration folder will be used. even if a folder is specified, you can specify the full path to the file if no restriction is set.
            </value>
        </entry>
        <entry>
            <key>ru</key>
            <value>Модуль работы с файлами.
работает в двух режимах:
    динамический:
        требуется тип - useArgument и хотя бы один источник
        обрабатывает команды из источников.
        формат:
            если установлен useArgument - цифра - тип операции,
            если rootFolder - папка, то - строка - относительный путь к файлу(директории). если rootFolder - имя файл, то используется он.
            другие аргументы зависят от типа действияю.
    статический:
        тип и все аргументы (arguments) задаются в конфигурации.
если установлен rootFolder, будет исползоваться этот путь в качестве родительской директории (если путь относительный, например 1.txt то полный путь будет относительно рабочей директории).
иначе будет использоваться рабочая папка конфигурации. даже если указана папка можно указывать полный путь до файла, если не установлено ограничение.
            </value>
        </entry>
    </help>

    <examples>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>First example. output file names and directories in a folder. dynamic path.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Первый пример. вывод имен файлов и директорий в папке. динамическое указание пути.</value>
                </entry>
            </description>
            <settings/>
            <variables/>
            <sources>
                <source>
                    <actions>
                        <action>
                            <messages>
                                <message>
                                    <type>STRING</type>
                                    <value>C:\tmp</value>
                                </message>
                            </messages>
                        </action>
                    </actions>
                </source>
            </sources>
            <output>
                <message>
                    <type>STRING</type>
                    <value>Test1</value>
                </message>
                <message>
                    <type>STRING</type>
                    <value>Test2</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>Second example. output file names and directories in a folder. static.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Второй пример. вывод имен файлов и директорий в папке. статический.</value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>rootFolder</name>
                    <value>C:\tmp</value>
                </setting>
            </settings>
            <variables/>
            <sources/>
            <output>
                <message>
                    <type>STRING</type>
                    <value>Test1</value>
                </message>
                <message>
                    <type>STRING</type>
                    <value>Test2</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>Third example. output file names and directories in a folder. static.
using the work configuration directory, where 1 file is located: test.txt.
                    </value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Третий пример. вывод имен файлов и директорий в папке. статический.
с использованием рабочей директории конфигурации, где лежит 1 файл: test.txt.
                    </value>
                </entry>
            </description>
            <settings/>
            <variables/>
            <sources/>
            <output>
                <message>
                    <type>STRING</type>
                    <value>test.txt</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>Fourth example. output file names and directories in a folder.
fully dynamic - both the command and the arguments are transmitted by incoming messages.
                    </value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Четвертый пример. вывод имен файлов и директорий в папке.
полностью динамический - и команда и аргументы передаются входящими сообщениями.
                    </value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>type</name>
                    <value>useArgument</value>
                </setting>
            </settings>
            <variables/>
            <sources>
                <source>
                    <actions>
                        <action>
                            <messages>
                                <message>
                                    <type>INTEGER</type>
                                    <value>9</value>
                                </message>
                                <message>
                                    <type>STRING</type>
                                    <value>C:\tmp</value>
                                </message>
                            </messages>
                        </action>
                    </actions>
                </source>
            </sources>
            <output>
                <message>
                    <type>STRING</type>
                    <value>Test1</value>
                </message>
                <message>
                    <type>STRING</type>
                    <value>Test2</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>Fifth example. Append text to file using dynamic mode.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Пятый пример. Дописать текст в файл используя динамический режим работы.</value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>type</name>
                    <value>useArgument</value>
                </setting>
            </settings>
            <variables/>
            <sources>
                <source>
                    <actions>
                        <action>
                            <messages>
                                <message>
                                    <type>STRING</type>
                                    <value>writePart</value>
                                </message>
                                <message>
                                    <type>STRING</type>
                                    <value>C:\tmp\1.txt</value>
                                </message>
                                <message>
                                    <type>STRING</type>
                                    <value>hello world</value>
                                </message>
                            </messages>
                        </action>
                    </actions>
                </source>
            </sources>
            <output>
                <message>
                    <type>LONG</type>
                    <value>11</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>Sixth example. Read text file.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Шестой пример. Читать текстовый файл.</value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>type</name>
                    <value>readText</value>
                </setting>
            </settings>
            <variables/>
            <sources>
                <source>
                    <actions>
                        <action>
                            <messages>
                                <message>
                                    <type>STRING</type>
                                    <value>C:\tmp\1.txt</value>
                                </message>
                            </messages>
                        </action>
                    </actions>
                </source>
            </sources>
            <output>
                <message>
                    <type>String</type>
                    <value>hello world</value>
                </message>
            </output>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
    </examples>
    <icon>iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeTAAAAfElEQVRIie3VPQrCQBAG0EeOJQmKlXr/E2QtTOcN1iIBFf8yknTzwXTL95bdYnjOCQV15lyxFUjBJnC+YoggNXKb6XyLC/ZrASJIFChTOezMeK4ocETv9eMXA352NAsUfk0CCSSQQAJrAGf3DfVPOuOW+5h3GyoyPQ6PhTfZ1zSh6WD4jAAAAABJRU5ErkJggg==</icon>

</properties>
