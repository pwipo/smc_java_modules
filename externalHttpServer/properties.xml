<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<properties>

    <uuid>HttpServer</uuid>
    <provider>javaExternal</provider>
    <author>Nikolay V. Ulyanov</author>
    <contacts>ulianownv@mail.ru</contacts>
    <homePage>http://www.smcsystem.ru</homePage>
    <categories>Java, Net, Http, Server</categories>
    <copyrightAndLicense>
        <entry>
            <key>en</key>
            <value><![CDATA[The author and copyright holder is Nikolay V. Ulyanov.
The program is free for use.
Forbidden: changing the program code, its sale / resale, as well as other actions and rights not explicitly permitted.
The program is supplied as is. For problems arising during the operation or installation of the program, the author, developer and distributor are not responsible.
            ]]></value>
        </entry>
        <entry>
            <key>ru</key>
            <value><![CDATA[Автором и правообладателем является Ульянов Николай Владимирович.
Программа бесплатна для использования.
Запрещено: изменение кода программы, её продажа/перепродажа а так же иные не разрешенные явно действия и права.
Программа поставляется как есть. За проблемы, возникающие в процессе эксплуатации или установки программы, автор, разработчик и распространитель ответственности не несут.
            ]]></value>
        </entry>
    </copyrightAndLicense>
    <className>ru.smcsystem.smcmodules.module.Server</className>
    <ver>1.4.12</ver>
    <apiVer>1.4.2</apiVer>
    <date>09-05-2025</date>

    <defaultSettings>
        <value>
            <name>port</name>
            <type>INTEGER</type>
            <value>8080</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Порт.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Port.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>requestTimeout</name>
            <type>INTEGER</type>
            <value>20000</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Таймаут ожидания обработки запроса в милисекундах.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Request timeout in milliseconds.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>countThreads</name>
            <type>INTEGER</type>
            <value>100</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Количество потоков.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Count threads.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>backlog</name>
            <type>INTEGER</type>
            <value>0</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Кэш новых подключений в очерди (с которыми еще не работают). Если это значение меньше или равно нулю, используется системное значение по умолчанию.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>The socket backlog. If this value is less than or equal to zero, then a system default value is used.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>protocol</name>
            <type>STRING</type>
            <validValues>
                <value>HTTP</value>
                <value>HTTPS</value>
                <value>VIRTUAL</value>
            </validValues>
            <value>HTTP</value>
            <description>
                <entry>
                    <key>en</key>
                    <value>protocol. if VIRTUAL is selected, then you can use virtual servers with different sets of settings, see setting virtualServerSettings.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>протокол. если выбран VIRTUAL, то можно использовать виртуальные сервера с разными наборами настроек, смотри настройку virtualServerSettings.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>availablePaths</name>
            <type>STRING</type>
            <value></value>
            <subType>TEXT</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Defines a list of available addresses. Only these are responded to, otherwise 404 is returned. If empty, all sites are accepted.
If VIRTUAL is selected, the protocol, host, and port must be specified for each path, for example: http://localhost:8080^/.*, where http://localhost:8080 identifies the virtual host, and ^/.* is a regular expression.
If they are not specified, this path will be applied to the first server.
The list is separated by :: or newline characters.
                    ]]></value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Определяет список доступных адресов. Только на них происходит ответ, иначе возвращает 404. Если пуст - то принимаются все сайты.
Если выбран VIRTUAL, для каждого пути надо указывать протокол, хост и порт, например: http://localhost:8080^/.*, тут http://localhost:8080 - идентифицирует виртуальный хост, а ^/.* - регулярное выражение.
Если они не указаны, то этот путь будет применен к первому серверу.
Список разделен символами :: или символом новой строки.
                    ]]></value>
                </entry>
            </description>
        </value>
        <value>
            <name>keyStoreFileName</name>
            <type>STRING</type>
            <value></value>
            <subType>STRING</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value>fil name - key store.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>имя файла - хранилеща ключей.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>keyStorePass</name>
            <type>STRING</type>
            <value></value>
            <subType>PASSWORD</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value>password to the certificate store and the key for the HTTPS protocol.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>пароль к хранилищу сертификатов и ключу для протокола HTTPS.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>keyPass</name>
            <type>STRING</type>
            <value></value>
            <subType>PASSWORD</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value>the password to the key certificate (keyAlias) from the repository for the HTTPS protocol.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>пароль к сертификату ключа (keyAlias) из хранилища для протокола HTTPS.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>keyAlias</name>
            <type>STRING</type>
            <value></value>
            <subType>STRING</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value>key name in key store.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>название искомого ключа в хранилище сертификатов.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>bindAddress</name>
            <type>STRING</type>
            <value></value>
            <subType>STRING</subType>
            <description>
                <entry>
                    <key>en</key>
                    <value>IP or DNS name, for binding server only to this IP address.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>IP или DNS имя, для привязки сервера только к этому ип адресу.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>sessionTimeout</name>
            <type>INTEGER</type>
            <value>10</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Время жизни неактивной сессии (в минутах).</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Inactive session lifetime (in minutes)</value>
                </entry>
            </description>
        </value>
        <value>
            <name>maxPostSize</name>
            <type>INTEGER</type>
            <value>1048576</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Максимальный размер Post запроса в байтах.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>The maximum size of a Post request in bytes.</value>
                </entry>
            </description>
        </value>
        <value>
            <name>allowMultipartParsing</name>
            <type>STRING</type>
            <validValues>
                <value>true</value>
                <value>false</value>
            </validValues>
            <value>false</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Позволять ли multipart запросы (загрузка файлов и тп).</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Whether to allow multipart requests (file uploads, etc.).</value>
                </entry>
            </description>
        </value>
        <value>
            <name>virtualServerSettings</name>
            <type>OBJECT_ARRAY</type>
            <value>[]</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Набор параметров для виртуальных серверов. Используется только для режима VIRTUAL.
Каждый объект представляет собой отдельный виртуальный сервере. Поля объекта соответствуют именам настроек, при этом если какое-то поле отсутствует, то берется соответсвующее значение из настройки. пример:
[{
"protocol":"HTTP","hostname":"localhost","port":8080,"keyStoreFileName":"","keyStorePass":"","keyAlias":"","keyPass":"","bindAddress":"","requestTimeout":20000,
"countThreads":10,"backlog":0,"sessionTimeout":30,"maxPostSize":10485760,"allowMultipartParsing":"false",
"headers":["Access-Control-Allow-Origin=*","Access-Control-Allow-Headers=Content-Type"], "maxFileSizeFull": -1, "fileResponsePieceSize": 1048576,
"corsAccessList":["127\.0\.0\..*"]
}]
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[A set of parameters for virtual servers. Used only for VIRTUAL mode.
Each object is a separate virtual server. The fields of the object correspond to the names of the settings, and if a field is missing, then the corresponding value is taken from the settings. example:
[{
"protocol":"HTTP","hostname":"localhost","port":8080,"keyStoreFileName":"","keyStorePass":"","keyAlias":"","keyPass":"","bindAddress":"","requestTimeout":20000,
"countThreads":10,"backlog":0,"sessionTimeout":30,"maxPostSize":10485760,"allowMultipartParsing":"false",
"headers":["Access-Control-Allow-Origin=*","Access-Control-Allow-Headers=Content-Type"], "maxFileSizeFull": -1, "fileResponsePieceSize": 1048576,
"corsAccessList":["127\.0\.0\..*"]
}]
                    ]]></value>
                </entry>
            </description>
        </value>
        <value>
            <name>requestType</name>
            <type>STRING</type>
            <validValues>
                <value>LIST</value>
                <value>OBJECT</value>
            </validValues>
            <value>LIST</value>
            <description>
                <entry>
                    <key>en</key>
                    <value><![CDATA[the type of request format that is created by the module for each external request and which is passed to the corresponding context. format:
LIST - list of simple values:
     1 - line - method
     2 - line - URL address
     3 - line - client address
     4 - line - session ID
     5 - number - number of parameters (get and post)
     6 and further parameters (format key=value)
     number - number of headers
     lines - headers (format key=value),
     Further
         for multipart request (only for post request):
             number - number of parts
             further in iteration:
                 number - the number of headers of a piece of data
                 headers of a piece of data (format key=value)
                 byte array - the data itself. or a number - the size if maxFileSizeFull is enabled and the size exceeds it.
         otherwise - byte array - the request body. or a number - the size if maxFileSizeFull is enabled and the size exceeds it.
OBJECT - in the form of OBJECT_ARRAY containing 1 object, which contains the following fields:
     method - string - method
     reqId - number - request number
     uri - string - URL address
     remoteAddr - string - client address
     sessionId - string - session ID
     params - an object with fields for each parameter
     headers - an object with fields for each header
     multipart - yes, if the multipart type is an array of objects, each of which contains fields:
         name - string - name.
         contentType - string - type.
         headers - object - with fields for each header.
         size - number - size.
         data - byte array - contains the data itself. Only if maxFileSizeFull is disabled or the size is less than it.
     size - if there is byte data (for multipart, the last one is duplicated) - number - size.
     data - if there is byte data (for multipart, the last one is duplicated) - byte array - contains the data itself. Only if maxFileSizeFull is disabled or the size is less than it.
                    ]]></value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[тип формата запроса, который создается модулем на каждый внешний запрос и который передается соответствующему контексту. формат:
LIST - список простых значений:
    1 - строка - метод
    2 - строка - URL адрес
    3 - строка - адрес клиента
    4 - строка - ид сессии
    5 - число - количество параметров (get и post)
    6 и далее параметры (формат ключ=значение)
    число - количестово заголовков
    строки - заголовки (формат ключ=значение),
    далее
        для multipart запроса (только для post запроса):
            число - количестово частей
            далее в итерации:
                число - количестово заголовков куска данных
                заголовки куска данных (формат ключ=значение)
                байтовый массив - сами данные. или число - размер если включен maxFileSizeFull и размер превышает его.
        иначе - байтовый массив - тело запроса. или число - размер если включен maxFileSizeFull и размер превышает его.
OBJECT - в виде OBJECT_ARRAY содержащем 1 объект, в котором содержаться поля:
    method - строка - метод
    reqId - число - номер запроса
    uri - строка - URL адрес
    remoteAddr - строка - адрес клиента
    sessionId - строка - ид сессии
    params - объект с полями для каждого параметра
    headers - объект с полями для каждого заголовка
    multipart - есть, если тип multipart - массив объектов, каждый из которых содержит поля:
        name - строка - имя.
        contentType - строка - тип.
        headers - объект - с полями для каждого заголовка.
        size - число - размер.
        data - байтовый массив - содержит сами данные. Только если maxFileSizeFull выключен или размер меньше его.
    size - если есть байтовые данные (для multipart дублируется последний) - число - размер.
    data - если есть байтовые данные (для multipart дублируется последний) - байтовый массив - содержит сами данные. Только если maxFileSizeFull выключен или размер меньше его.
                    ]]></value>
                </entry>
            </description>
        </value>
        <value>
            <name>fileResponsePieceSize</name>
            <type>INTEGER</type>
            <value>1048576</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value>Размер куска данных (в байтах), которые читаются при подготовке ответа (fast_response).</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>The size of a piece of data (in bytes) that is read when preparing a response (fast_response).</value>
                </entry>
            </description>
        </value>
        <value>
            <name>headers</name>
            <type>OBJECT_ARRAY</type>
            <value>[]</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Заголовки по умолчанию, которые будут добавляться к каждому ответу.
Формат: массив строк, каждая строка должна содержать имя и значение разделенные символом =.
Примеры: ["Access-Control-Allow-Origin=*", "Access-Control-Allow-Methods=POST, GET, PUT, DELETE, OPTIONS", "Access-Control-Allow-Headers=Content-Type"]
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Default headers that will be added to each response.
Format: array of strings, each line must contain a name and value separated by the = symbol.
Examples: ["Access-Control-Allow-Origin=*", "Access-Control-Allow-Methods=POST, GET, PUT, DELETE, OPTIONS", "Access-Control-Allow-Headers=Content-Type"]
                    ]]></value>
                </entry>
            </description>
        </value>
        <value>
            <name>maxFileSizeFull</name>
            <type>INTEGER</type>
            <value>-1</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Максимальный размер мгновенной обработки файла или тела для Post запроса, в байтах.
Если размер меньше этого значения или равен -1, то сразу читается и отправляется вместе с запросом.
Иначе в запросе за место байт отправляется только размер, а прочитать сам файл можно через вызов контекста get_file_part.
Используется для ленивой загрузки больших файлов.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Maximum size of instant file or body processing for a Post request, in bytes.
If the size is less than this value or equal to -1, it is immediately read and sent along with the request.
Otherwise, only the size is sent in place of bytes in the request, and the file itself can be read by calling the get_file_part context.
Used for lazy loading of large files.
                    ]]></value>
                </entry>
            </description>
        </value>
        <value>
            <name>corsAccessList</name>
            <type>OBJECT_ARRAY</type>
            <value>[]</value>
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Массив строк, содержащих паттерны источников, которым разрешен CORS доступ.
Если есть совпадение, то добавляется заголовок: Access-Control-Allow-Origin: client_ip
Формат: массив строк, каждая строка должна содержать полный ip или его паттерн.
Примеры: ["http://127\.0\.0\.1:3000", "http://example.com", ".*"]
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[An array of strings containing patterns of origins that are allowed CORS access.
If there is a match, the header is added: Access-Control-Allow-Origin: client_ip
Format: array of strings, each string must contain a full IP or its pattern.
Examples: ["http://127\.0\.0\.1:3000", "http://example.com", ".*"]
                    ]]></value>
                </entry>
            </description>
        </value>
    </defaultSettings>

    <types>
        <type t="default" minS="0" maxS="0" minEC="0" maxEC="-1" minC="0" maxC="0">
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Если есть контексты исполнения, запускает веб сервер, иначе останавливает.
При поступлении запроса:
    если список разрешенных адресов не пуст и если указанный путь находится в списке разрешенных, то запускается только контекст находящийся на той же позиции в списке.
    если список разрешенных адресов пуст, последовательно запускает все контексты исполнения.
Контексты запускаются с данными запроса в качестве параметров от сервера (аналог вызова функции), поэтому у запускаемых контекстов должен быть настроен источник на сервер.
После исполнения, данные от последнего исполненного контекста (если запускалось несколько) используются в качестве ответа.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[If there are execution contexts, it starts the web server, otherwise it stops.
When a request is received:
     if the list of allowed addresses is not empty and if the specified path is in the list of allowed addresses, then only the context located at the same position in the list is launched.
     if the list of allowed addresses is empty, starts all execution contexts sequentially.
Contexts are launched with request data as parameters from the server (analogous to a function call), so the launched contexts must have a server source configured.
After execution, data from the last executed context (if several were launched) is used as a response.
                    ]]></value>
                </entry>
            </description>
            <sources/>
            <output>
                <element t="VALUE" c="1" vt="STRING" v="stop server"/>
            </output>
            <ecs>
                <ec c="-1">
                    <description>
                        <entry>
                            <key>ru</key>
                            <value><![CDATA[Вызывается при поступлении запроса по соответствующему путь (URL).
Формат запроса зависит от настройки requestType. Описание формата описано в ней.
Формат ответа от контекста:
    1 - число - сообщение код ответа (200),
    остальные кроме последнего - строки - заголовки в формате ключ=значение,
    последнее - байтовый массив или строка - тело ответа.
                    ]]></value>
                        </entry>
                        <entry>
                            <key>en</key>
                            <value><![CDATA[Called when a request is received at the corresponding path (URL).
The request format depends on the requestType setting. The format is described there.
Response format from context:
     1 - number - message response code (200),
     the rest except the last one are lines - headers in the key=value format,
     the latter is a byte array or a string - the body of the response.
                    ]]></value>
                        </entry>
                    </description>
                    <elements>
                        <element t="VALUE_ANY" c="1" vt="STRING" v="GET">
                            <description>
                                <entry k="ru" v="Формат запроса зависит от настройки requestType. Описание формата описано в ней."/>
                                <entry k="en" v="The request format depends on the requestType setting. The format is described there."/>
                            </description>
                        </element>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="INTEGER" v="200"/>
                        <element t="VALUE" c="-1" vt="STRING" v="key=value"/>
                        <element t="VALUE_ANY" c="1" vt="STRING" v="hello world"/>
                    </output>
                </ec>
            </ecs>
        </type>
        <type t="fast_response" minS="3" maxS="4" minEC="1" maxEC="3">
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Подготавливает ответ в формате json с ошибками. Формат удобно использовать для передачи ошибок.
Так же, удобен для передачи больших файлов
На вход принимает 3-4 источника: формат, номер запроса, данные, заголовки.
Тип ответа - application/json, объект - с полями:
    код_ошибки - если 0 то нет ошибки.
    текст_ошибки - заполняется только если ошибка.
    данные - заполняются только если нет ошибки.
В 3 источнике содержаться данные или ошибка:
    Если ошибка (строка или строка и число или объект), то он воспринимается как ошибка и поле данных не будет заполняться. Если передано число вторым параметром, то оно будет указано как код ошибки, иначе -1.
    Если данные, то вставляет их в поле с данными. Код ошибки 0 и текста ошибки нет. Типы данных:
        Если объект, содержит только поля код_ошибки, текст_ошибки и данные, то предполагается что это полный ответ, и конвертирует как есть, без вставки в новый объект, в поле с данными.
        Если байтовый массив, то передает его напрямую, без создания объекта и конвертации. При этом старается угадать тип контента.
        Если строка, то предполагает что это путь до файла, в этом случае вызывает 2 и 3 контексты для скачивания файла (опционально).
В конце конвертирует получившийся объект в строку (json), для чего вызывает первый контекст.
Второй контекст используется для получения части файла, передает 3 параметра: путь, начальная позиция, размер. Ожидает получить байтовый массив.
Третий контекст используется для получения размера файла передает 1 параметр: путь, получает число - размер в байтах.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Prepares a response in json format with errors. The format is convenient to use for transmitting errors.
Also convenient for transferring large files
It accepts 3-4 sources as input: format, request number, data, headers.
Response type - application/json, object - with fields:
    error_code - if 0 then there is no error.
    error_text - filled only if there is an error.
    data - filled only if there is no error.
Source 3 contains data or an error:
    If an error (string or string and number or object), then it is perceived as an error and the data field will not be filled. If a number is passed as the second parameter, then it will be specified as the error code, otherwise -1.
    If data, then inserts them into the data field. The error code is 0 and there is no error text. Data types:
        If the object contains only the error_code, error_text and data fields, then it is assumed that this is a complete response, and converts as is, without inserting into a new object, into the data field.
        If a byte array, then it is transferred directly, without creating an object and converting. At the same time, it tries to guess the content type.
        If it is a string, it assumes that this is a path to the file, in this case it calls contexts 2 and 3 to download the file (optional).
At the end, it converts the resulting object into a string (json), for which it calls the first context.
The second context is used to get a part of the file, it passes 3 parameters: path, starting position, size. It expects to receive a byte array.
The third context is used to get the file size, it passes 1 parameter: path, it receives a number - the size in bytes.
                    ]]></value>
                </entry>
            </description>
            <sources>
                <source>
                    <description>
                        <entry k="ru" v="Имена полей объекта-ответа задаются первыми 3 входящими значениями: код_ошибки, текст_ошибки, данные."/>
                        <entry k="en" v="The field names of the response object are specified by the first 3 incoming values: error_code, error_text, data."/>
                    </description>
                    <elements>
                        <element o="true" vt="STRING" v="errorCode">
                            <description>
                                <entry k="ru" v="Имя поля кода ошибки. Значение по умолчанию - errorCode."/>
                                <entry k="en" v="Error code field name. The default value is errorCode."/>
                            </description>
                        </element>
                        <element o="true" vt="STRING" v="errorText">
                            <description>
                                <entry k="ru" v="Имя поля текста ошибки. Значение по умолчанию - errorCode."/>
                                <entry k="en" v="Error text field name. The default value is errorCode."/>
                            </description>
                        </element>
                        <element o="true" vt="STRING" v="data">
                            <description>
                                <entry k="ru" v="Имя поля для данных. Значение по умолчанию - errorCode."/>
                                <entry k="en" v="Data field name. The default value is errorCode."/>
                            </description>
                        </element>
                    </elements>
                </source>
                <source>
                    <elements>
                        <element t="VALUE" o="true" vt="LONG" v="1">
                            <description>
                                <entry k="ru" v="Номер запроса, может быть пустым. Если не указан или равен -1, то ищется запрос для текущего потока. Значение по умолчанию -1."/>
                                <entry k="en" v="Request number, may be empty. If not specified or equal to -1, then the request for the current thread is searched. The default value is -1."/>
                            </description>
                        </element>
                        <element o="true" vt="STRING" v="application/json">
                            <description>
                                <entry k="ru" v="Тип контента для объекта. Значение по умолчанию - application/json."/>
                                <entry k="en" v="Content type for object. The default value is application/json."/>
                            </description>
                        </element>
                    </elements>
                </source>
                <source>
                    <elements>
                        <element t="VALUE_ANY" c="-1" vt="STRING" v="success">
                            <description>
                                <entry k="ru" v="Ответ, который нужно обработать, могут быть: данными или ошибкой."/>
                                <entry k="en" v="Response to be processed can be: data or error."/>
                            </description>
                        </element>
                    </elements>
                </source>
                <source o="true">
                    <description>
                        <entry k="ru" v="Заголовки в формате имя=значение."/>
                        <entry k="en" v="Headers in the format name=value."/>
                    </description>
                    <elements>
                        <element>
                            <type>VALUE</type>
                            <count>-1</count>
                            <valueType>STRING</valueType>
                            <value>Content-Type=text</value>
                        </element>
                    </elements>
                </source>
            </sources>
            <output>
                <element t="VALUE_ANY" c="-1" vt="INTEGER" v="200"/>
            </output>
            <ecs>
                <ec>
                    <description>
                        <entry k="ru" v="Конвертирует OBJECT_ARRAY в json."/>
                        <entry k="en" v="Converts OBJECT_ARRAY to json."/>
                    </description>
                    <elements>
                        <element t="VALUE" c="1" vt="OBJECT_ARRAY">
                            <value>[]</value>
                        </element>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="STRING" v="[]"/>
                    </output>
                </ec>
                <ec>
                    <description>
                        <entry k="ru" v="Используется для получения части файла, передает 3 параметра: путь, начальная позиция, размер."/>
                        <entry k="en" v="Used to get part of a file, passes 3 parameters: path, starting position, size."/>
                    </description>
                    <elements>
                        <element t="VALUE" c="1" vt="STRING" v="/fg/file.txt"/>
                        <element t="VALUE" c="1" vt="LONG" v="0"/>
                        <element t="VALUE" c="1" vt="INTEGER" v="10"/>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="BYTES" v="AQIDBAU="/>
                    </output>
                </ec>
                <ec>
                    <description>
                        <entry k="ru" v="Используется для получения размера файла передает 1 параметр: путь."/>
                        <entry k="en" v="Used to get the file size, passes 1 parameter: path."/>
                    </description>
                    <elements>
                        <element t="VALUE" c="1" vt="STRING" v="/fg/file.txt"/>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="LONG" v="10"/>
                    </output>
                </ec>
            </ecs>
        </type>
        <type t="file_fast_response" minS="2" maxS="3" minEC="2" maxEC="2">
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Передает файл в качестве ответа. Аналогичен fast_response, но отправляет только файлы.
Ожидает путь до файла, в этом случае вызывает 1 и 2 контексты для скачивания файла.
Первый контекст используется для получения части файла, передает 3 параметра: путь, начальная позиция, размер. Ожидает получить байтовый массив.
Второй контекст используется для получения размера файла передает 1 параметр: путь, получает число - размер в байтах.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Sends a file as a response. Similar to fast_response, but only sends files.
Waits for the path to the file, in this case calls contexts 1 and 2 to download the file.
The first context is used to receive part of the file, passing 3 parameters: path, starting position, size. Expects to receive a byte array.
The second context is used to get the file size, passes 1 parameter: path, receives a number - size in bytes.
                    ]]></value>
                </entry>
            </description>
            <sources>
                <source>
                    <elements>
                        <element t="VALUE" o="true" vt="LONG" v="1">
                            <description>
                                <entry k="ru" v="Номер запроса, может быть пустым. Если не указан или равен -1, то ищется запрос для текущего потока."/>
                                <entry k="en" v="Request number, may be empty. If not specified or equal to -1, then the request for the current thread is searched."/>
                            </description>
                        </element>
                    </elements>
                </source>
                <source>
                    <elements>
                        <element vt="STRING" v="/path/file.txt">
                            <description>
                                <entry k="ru" v="Путь до файла"/>
                                <entry k="en" v="Path to the file"/>
                            </description>
                        </element>
                    </elements>
                </source>
                <source o="true">
                    <description>
                        <entry k="ru" v="Заголовки в формате имя=значение."/>
                        <entry k="en" v="Headers in the format name=value."/>
                    </description>
                    <elements>
                        <element>
                            <type>VALUE</type>
                            <count>-1</count>
                            <valueType>STRING</valueType>
                            <value>Content-Type=text</value>
                        </element>
                    </elements>
                </source>
            </sources>
            <output>
                <element t="VALUE_ANY" c="-1" vt="INTEGER" v="200"/>
            </output>
            <ecs>
                <ec>
                    <description>
                        <entry k="ru" v="Используется для получения части файла, передает 3 параметра: путь, начальная позиция, размер."/>
                        <entry k="en" v="Used to get part of a file, passes 3 parameters: path, starting position, size."/>
                    </description>
                    <elements>
                        <element t="VALUE" c="1" vt="STRING" v="/fg/file.txt"/>
                        <element t="VALUE" c="1" vt="LONG" v="0"/>
                        <element t="VALUE" c="1" vt="INTEGER" v="10"/>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="BYTES" v="AQIDBAU="/>
                    </output>
                </ec>
                <ec>
                    <description>
                        <entry k="ru" v="Используется для получения размера файла передает 1 параметр: путь."/>
                        <entry k="en" v="Used to get the file size, passes 1 parameter: path."/>
                    </description>
                    <elements>
                        <element t="VALUE" c="1" vt="STRING" v="/fg/file.txt"/>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="LONG" v="10"/>
                    </output>
                </ec>
            </ecs>
        </type>
        <type t="stop">
            <description>
                <entry>
                    <key>ru</key>
                    <value>Остановить сервер.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Stop the server.</value>
                </entry>
            </description>
            <sources/>
            <output/>
        </type>
        <type t="start" minEC="0" maxEC="-1">
            <description>
                <entry>
                    <key>ru</key>
                    <value>Запустить сервер.</value>
                </entry>
                <entry>
                    <key>en</key>
                    <value>Start the server.</value>
                </entry>
            </description>
            <sources/>
            <output/>
        </type>
        <type t="get_file_part" minS="1" maxS="1">
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Читает часть файла/контекста из входного потока.
Используется совместно с настройкой maxFileSizeFull и только если в запросе нет байтового массива.
Принимает 3 параметра: идентификатор запроса, номер файла (с нуля), количество байт которые надо прочитать.
Возвращает массив байт только если есть что читать. По достижении конца файла ничего не возвращает.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Reads part of a file/context from the input stream.
Used in conjunction with the maxFileSizeFull setting and only if the request does not contain a byte array.
Takes 3 parameters: request ID, file number (starting with zero), number of bytes to read.
Returns a byte array only if there is something to read. Returns nothing when the end of the file is reached.
                    ]]></value>
                </entry>
            </description>
            <sources>
                <source>
                    <elements>
                        <element t="VALUE" o="true" vt="LONG" v="1">
                            <description>
                                <entry k="ru" v="Номер запроса, может быть пустым. Если не указан или равен -1, то ищется запрос для текущего потока. Значение по умолчанию -1."/>
                                <entry k="en" v="Request number, may be empty. If not specified or equal to -1, then the request for the current thread is searched. The default value is -1."/>
                            </description>
                        </element>
                        <element t="VALUE" o="true" vt="INTEGER" v="0">
                            <description>
                                <entry k="ru" v="Номер файла (с нуля). Значение по умолчанию 0."/>
                                <entry k="en" v="File number (starting from zero). The default value is 0."/>
                            </description>
                        </element>
                        <element t="VALUE" o="true" vt="INTEGER" v="10">
                            <description>
                                <entry k="ru" v="Количество байт которые надо прочитать. Значение по умолчанию 1048576."/>
                                <entry k="en" v="The number of bytes to read. The default value is 1048576."/>
                            </description>
                        </element>
                    </elements>
                </source>
            </sources>
            <output>
                <element>
                    <type>VALUE</type>
                    <count>1</count>
                    <valueType>BYTES</valueType>
                    <value>AQIDBAU=</value>
                </element>
            </output>
        </type>
        <type t="get_part_as_object" minS="1" maxS="1" minEC="1" maxEC="1">
            <description>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Читает файл/контекст указанной части (или читает из входного потока) и конвертирует в ObjectArray.
Работает и если в запросе нет байтового массива (читает входной поток) и если есть.
Принимает 3 параметра: объект запроса, номер части (с нуля), количество байт которые надо прочитать. Возвращает объект.
                    ]]></value>
                </entry>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Reads the file/context of the specified part (or reads from the input stream) and converts it to ObjectArray.
Works both if the request does not contain a byte array (reads the input stream) and if it does.
Takes 3 parameters: the request object, the part number (starting from zero), the number of bytes to read. Returns an object.
                    ]]></value>
                </entry>
            </description>
            <sources>
                <source>
                    <elements>
                        <element t="VALUE" vt="OBJECT_ARRAY" v="[]">
                            <description>
                                <entry k="ru" v="Объект запроса, содержащий поля: reqId, data, multipart и другие"/>
                                <entry k="en" v="Request object containing fields: reqId, data, multipart and others"/>
                            </description>
                        </element>
                        <element t="VALUE" o="true" vt="INTEGER" v="0">
                            <description>
                                <entry k="ru" v="Номер файла (с нуля). Значение по умолчанию 0."/>
                                <entry k="en" v="File number (starting from zero). The default value is 0."/>
                            </description>
                        </element>
                        <element t="VALUE" o="true" vt="INTEGER" v="1024">
                            <description>
                                <entry k="ru" v="Максимальный размер, которые можно прочитать всего. Должен быть меньше maxPostSize. Значение по умолчанию 2147483647."/>
                                <entry k="en" v="The maximum size that can be read in total. Must be less than maxPostSize. Default value is 2147483647."/>
                            </description>
                        </element>
                    </elements>
                </source>
            </sources>
            <ecs>
                <ec>
                    <description>
                        <entry k="ru" v="Конвертер в ObjectArray, на вход передается байтовый массив. Например конвертер из json или xml."/>
                        <entry k="en" v="Converter to ObjectArray, a byte array is passed to the input. For example, a converter from json or xml."/>
                    </description>
                    <elements>
                        <element t="VALUE" vt="BYTES" v="AQIDBAU="/>
                    </elements>
                    <output>
                        <element t="VALUE" c="1" vt="OBJECT_ARRAY" v="[]"/>
                    </output>
                </ec>
            </ecs>
            <output>
                <element t="VALUE" c="1" vt="OBJECT_ARRAY" v="[]"/>
            </output>
        </type>
    </types>

    <useStorage>true</useStorage>
    <threadSafe>true</threadSafe>
    <useVariables>false</useVariables>
    <useManagement>false</useManagement>

    <description>
        <entry>
            <key>en</key>
            <value>The module provides the functionality of a web server.</value>
        </entry>
        <entry>
            <key>ru</key>
            <value>Модуль предоставляет функцилональность веб сервера.</value>
        </entry>
    </description>

    <help>
        <entry>
            <key>en</key>
            <value><![CDATA[The module provides web server functionality.
The Apache Tomcat 9 library is used.
You can use the virtual servers mode (VIRTUAL), in which case you can set your own settings for each server.
If the HTTPS protocol is used, you need to upload a key (RSA) to the working configuration directory.
Command to generate a key: keytool -genkeypair -keyalg RSA -alias self_signed -keypass simulator -keystore lic.key -storepass simulator
            ]]></value>
        </entry>
        <entry>
            <key>ru</key>
            <value><![CDATA[Модуль предоставляет функциональность веб сервера.
Используется библиотека Apache Tomcat 9.
Можно использовать режим виртуальных серверов (VIRTUAL), в этом случае для каждого сервера можно выставить свои настройки.
Если используется протокол HTTPS, необходимо в рабочую директорию конфигурации загрузить ключ (RSA).
Команда для генерации ключа: keytool -genkeypair -keyalg RSA -alias self_signed -keypass simulator -keystore lic.key -storepass simulator
            ]]></value>
        </entry>
    </help>

    <examples>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>First example. a simple web server is used by one processing execution context (it receives a request and issues a response) all requests.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Первый пример. используется простой веб сервер одним управляемым контекстом исполнения обрабатывающим (принимает запрос и выдает ответ) все запросы.</value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>availablePaths</name>
                    <value>.*</value>
                </setting>
            </settings>
            <variables/>
            <sources/>
            <output/>
            <countManagedExecutionContexts>1</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value><![CDATA[Second example. used by a web server using the HTTPS protocol.
in the working directory of the configuration should be a file with the keys lig.keystore.
with one managed execution context processing (accepts the request and issues a response) all requests.
                    ]]></value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value><![CDATA[Второй пример. используется веб сервер использующим протокол HTTPS.
в рабочей директории конфигурации должен находится файл с ключами lig.keystore.
c одним управляемым контекстом исполнения обрабатывающим (принимает запрос и выдает ответ) все запросы.
                    ]]></value>
                </entry>
            </description>
            <settings>
                <setting>
                    <name>protocol</name>
                    <value>HTTPS</value>
                </setting>
                <setting>
                    <name>availablePaths</name>
                    <value>.*</value>
                </setting>
                <setting>
                    <name>keyStoreFileName</name>
                    <value>lig.keystore</value>
                </setting>
                <setting>
                    <name>keyPass</name>
                    <value>simulator</value>
                </setting>
                <setting>
                    <name>keyStorePass</name>
                    <value>simulator</value>
                </setting>
                <setting>
                    <name>keyAlias</name>
                    <value>self_signed</value>
                </setting>
            </settings>
            <variables/>
            <sources/>
            <output/>
            <countManagedExecutionContexts>1</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
        <example>
            <description>
                <entry>
                    <key>en</key>
                    <value>The third example. Stop a previously running server.</value>
                </entry>
                <entry>
                    <key>ru</key>
                    <value>Третий пример. остановка ранее запущенного сервера.</value>
                </entry>
            </description>
            <settings/>
            <variables/>
            <sources/>
            <output/>
            <countManagedExecutionContexts>0</countManagedExecutionContexts>
            <countManagedConfigurations>0</countManagedConfigurations>
        </example>
    </examples>
    <icon><![CDATA[iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAADNElEQVR4nO2aS2sUQRCAv5jdaDAaMahJfEbQYwRRUFAPOSmCngQvgv4AyU0RRBNBQQ+CJCgoCnoy+LgEUdR48g+oYA6ixhdqjCJKNBsfKw2zMFSq15nZndnZTX9Ql+2aqa7amemq6gaHw+FwOBwOh8PhCE89sBE4AtwAhoFPwF/gDzAGPAFuAgeBDUAdNUAHcBL4AORDymvgBLCYKqQVuABMRnBcSg7oB1qoEvYCX8rguJTPwC5SzCzgUgiH7gDLgOXA3RDXnQMypIzZwH3LhL8qvw0BM0XwHgS81sgtoJGU0GCZvHl3DwM94vdxYIXlgzkudHu8lSOn3H8QyJICriiTewms9R7VN2LsaJF79SorgbnHOmBEsXOWCrNPmdQjoM0b71KeCrNC2GhVVg5zD0O7lytIe7upEO3ANzGZF8LBfjE+EOC+A+KaPt9Ym2fDPz4KzKcCXI5hqYsqJtCJ0gH8ToHjBZlIOmM8kwKnpRxPyvkM8DEFDkt5BcxIIgBdypd9boBvRHcIG93i2nuWCnNM6K0nAXqVlFZjSOjtCGFjp7j2qUXvqtA7QALcFkb3W/SGhV5nCBtrxLVmubUVXn69ayTAM2F0k0VvVOgVS4C0HEO+41oB1KkkYbHzQxhdZdGTSVJzCBvNSgDmKHrzhI7pMsVKndfG8hs1laDGrwD/oI2sEoAFAfRMPhAr9UoAmiy6MqfPhqwwZQC0jlCj0PlJAnyP+ApoS6WNFiUAJiiSJULnPQnwXBjdbNGTjdBChVhgO/A2pqSoHGLK+G2aY4NlWgZlnyCNYvoRUzgmlEw/T0O2yExy4ydfJTKFLUJh0rLE/S8VrtoAZGMqhtJCoHmdnu4BWKkkOtMqAIaLMQfgnUXP1AnFaoYwYmxEDsAiZQvMLBtLfTp9RZqiVR8ArRzNe63r9iLNk4W1FAAs+4Ej3mZGxnsq/GNmp6emAtBg2dzMec7KrTFTTq+OYighIs2ryevb5QNucD6stQAUnoRSVoa0UPK89sR0QKJSEgnTvTlfpiMylZaSMCdAThX5oldlOVzKMblDwHXgsXfmRzv4kCbnt0by1uFwOBwOh8PhcFAr/AODmX0gfDWeUAAAAABJRU5ErkJggg==]]></icon>

</properties>
